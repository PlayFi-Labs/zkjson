{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[14]",
          "name": "_pubSignals",
          "type": "uint256[14]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x006d5bbb3bfa8871fe7ac6f872715e3a4e42d8d5783ac8b7d44af87da058896e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "651515",
    "logsBloom": "0x
    "blockHash": "0x6a4d155111e4a81574e6b755eeb1c3d321527f53bdda14b3d9d36ff0c9cfdf09",
    "transactionHash": "0x006d5bbb3bfa8871fe7ac6f872715e3a4e42d8d5783ac8b7d44af87da058896e",
    "logs": [],
    "blockNumber": 26,
    "cumulativeGasUsed": "651515",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e5290f9a294269fb66334563efd934ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[14]\",\"name\":\"_pubSignals\",\"type\":\"uint256[14]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Groth16VerifierJSON.sol\":\"Groth16VerifierJSON\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Groth16VerifierJSON.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity ^0.8.14;\\n\\ncontract Groth16VerifierJSON {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 8291347571322986423835508571217211439001052512548940363260041118504005887913;\\n    uint256 constant alphay  = 13469487457393407382364055320574103701418457348473326541563615563008834145857;\\n    uint256 constant betax1  = 21383959319414036689691955731768993421144695267634290577251301951623741925941;\\n    uint256 constant betax2  = 17331937754320941855532380784934009952519936562621365710198756542602661050030;\\n    uint256 constant betay1  = 6921316453522736571743443831851541053049621703525337874652391039793368870566;\\n    uint256 constant betay2  = 9719005099338695008133237560226137187112952619970312326660773550033235827712;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 2494255464414794349783339507630791445588396395351829055633447890198613928265;\\n    uint256 constant deltax2 = 26043893860991659157642336631077203438205892229834051496051473001458710947;\\n    uint256 constant deltay1 = 9903509911371299000074760518472040351764009893085729984468271207392465673695;\\n    uint256 constant deltay2 = 13851914541226053919354510019134921716905136324843522146292249444314091742636;\\n\\n    \\n    uint256 constant IC0x = 13435682267469115070161559550834652386301376167615535067097048161711090425469;\\n    uint256 constant IC0y = 9691702796978623047225090316423754866367927431353247572109237048085653248002;\\n    \\n    uint256 constant IC1x = 6405191331658281133699877980179955363771132095702233823011954747239645917682;\\n    uint256 constant IC1y = 14732195596501622644184761282767139140181527270328518592857076773078169807352;\\n    \\n    uint256 constant IC2x = 19816724547676255284843795030860568891057807642868952205330519780178764071625;\\n    uint256 constant IC2y = 19588724680693339502087288626892047352848218951331734501132914283948009408615;\\n    \\n    uint256 constant IC3x = 8493370754964556948213065400151947913229978035732646905176969802433492401499;\\n    uint256 constant IC3y = 4568714971252519932675487103239965688446614111911066018659434260586795441515;\\n    \\n    uint256 constant IC4x = 11554428499143410493694086815528992645003532991589836559100405364802883883808;\\n    uint256 constant IC4y = 20358032293781538470410611278846981173097184414594935751837209665348397353503;\\n    \\n    uint256 constant IC5x = 2437030962784470794922478626832448698047096714114130898520950689712392199563;\\n    uint256 constant IC5y = 20739833518485858419605643452424080712071444216793483903498354184313856680830;\\n    \\n    uint256 constant IC6x = 18767795802604734855662586419988439246489464559580713226979390779792076909749;\\n    uint256 constant IC6y = 7176316032556210478510572093426795784272432916273794126949672295027933618619;\\n    \\n    uint256 constant IC7x = 7941224121607596898888586435057418541236043088178559791116491455930943753784;\\n    uint256 constant IC7y = 17659845041589637152059140439662992431697011217874827822356633401207045071896;\\n    \\n    uint256 constant IC8x = 4891216352274953813298704355965890580801695050698326229536509700909113366917;\\n    uint256 constant IC8y = 4283915462046764696013955866971965551297868223039626550966285892983089696548;\\n    \\n    uint256 constant IC9x = 53310609485784033907964191700615616807091917485034613213003462755579003042;\\n    uint256 constant IC9y = 5829717943736432823737709381623581720232061508078853713941894606713672700173;\\n    \\n    uint256 constant IC10x = 2713866407925068482682018081791008709138701942951754177772413867503923353979;\\n    uint256 constant IC10y = 12631352921870272514312659992904583708423013064727767077745333040820332713966;\\n    \\n    uint256 constant IC11x = 617288488047505023352869842246683865550338012923406458651839720628654925255;\\n    uint256 constant IC11y = 9375095186603699724166112935667590297838682306426796119978357293136348526606;\\n    \\n    uint256 constant IC12x = 3117219045051031957691946620329487089935583804558404400052624449000033234761;\\n    uint256 constant IC12y = 6722385644933790628275331707285311779873734778400894023129548123088338161388;\\n    \\n    uint256 constant IC13x = 14885926117502364242483302634136800741377802723299009160619315841116836878091;\\n    uint256 constant IC13y = 18677014587039694287704694099842998658377406335975796207338334458899464373557;\\n    \\n    uint256 constant IC14x = 10123786673051429374015397424479052272578985122645450912063757104013585794125;\\n    uint256 constant IC14y = 11849745273511203910367941352492202450298366799401122107604135519589900764975;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[14] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                \\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                \\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n                \\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n                \\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n                \\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n                \\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\\n                \\n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\\n                \\n                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))\\n                \\n                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))\\n                \\n                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))\\n                \\n                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n            checkField(calldataload(add(_pubSignals, 96)))\\n            \\n            checkField(calldataload(add(_pubSignals, 128)))\\n            \\n            checkField(calldataload(add(_pubSignals, 160)))\\n            \\n            checkField(calldataload(add(_pubSignals, 192)))\\n            \\n            checkField(calldataload(add(_pubSignals, 224)))\\n            \\n            checkField(calldataload(add(_pubSignals, 256)))\\n            \\n            checkField(calldataload(add(_pubSignals, 288)))\\n            \\n            checkField(calldataload(add(_pubSignals, 320)))\\n            \\n            checkField(calldataload(add(_pubSignals, 352)))\\n            \\n            checkField(calldataload(add(_pubSignals, 384)))\\n            \\n            checkField(calldataload(add(_pubSignals, 416)))\\n            \\n            checkField(calldataload(add(_pubSignals, 448)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0xed2a350eb13a86ecbb0a499cb29c3156dcf9332c3660a235a9389d5314825373\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ad2806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638d15f88f14610030575b600080fd5b61004a600480360381019061004591906109fd565b610060565b6040516100579190610a81565b60405180910390f35b60006108a1565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f1db453a10d41b0f5095ac588dc99f91e8798fc60013953cc11e273ea7115de7d81527f156d4f34407af104051b1d7f005920b42d95c4b91b0d650a04e18b600e20580260208201526101a960008801357f20922091325d875a858be5d6ae7fabf72286dab6985c03ab3bdb7785ea63e9f87f0e2935b6d6508b76b1ca9009cce4e9ce77b18201be83bd94572df976b40d31f28461009b565b6101f960208801357f2b4ed344b28f82a60a4880b51c3007c9b551b001be3ae3b52ffa62126da148677f2bcfde5dc98565f310a06fd59158706c73f299cbd846592a5745aa96798d82c98461009b565b61024960408801357f0a19cd10b89867d66a3ce2609d76d6c8ddc682a7a33ccf67346a708457911d6b7f12c713d6719ef9ba344aa01e14ab34a5ebe342879011a7427ed60f064cffbd5b8461009b565b61029960608801357f2d023ce9fff7e5ab260615b1cb3c404c43216e8ed04390e610c1652d3d42ca1f7f198b932491276a8517f2e483b9e89cc903fa90f219a036e6069eb6cbc6c713208461009b565b6102e960808801357f2dda546c828ff17316bdd786ffbab12a2131349c4a8da829697c24a11659637e7f05634f865da258ec007238066bbe78cb71ec4b3ad0d77f96a540201629215d8b8461009b565b61033960a08801357f0fdda6a3ac1ea338882e496977674b35639751720fa5c0b15a7ec228eeb2a1bb7f297e322c42383b4fc5bb3861b4d1fa920d662a7d451c362d9204aee2f9d12cb58461009b565b61038960c08801357f270b1e3a7c08e0259c51c018c763c329a5bd17d3ffa9161f4ba3b2ddc209a4187f118e92d58efc9e0f4ea29e9539f60c51f56d1e17b34369e904e0c80b53594e388461009b565b6103d960e08801357f09789c37cef912ddd947df34eaff7c96a42ffa184c890b61df3d118dfdee8f247f0ad05491c831e82b1dcf8ce4ddbc7fcc5dfe0d3a36b958fa76747c0f71e559858461009b565b6104296101008801357f0ce380e0896bba1e5b880bf941e73acc3ffc1e4a54ad986a4da7cd997158110d7e1e2c3867f0a4508d83c1c045a26283fcf6e65ab8ae4a11d138f6ac218f00a28461009b565b61047a6101208801357f1bed17a77e385bcf0994ae8d8ae36a32c45cd7a1cda025ca1dc7b4a0dec6d7ee7f05fffe73b964efdbea96c47c7a26bebb5855fad90b5bb36d33ccf980939dd97b8461009b565b6104cb6101408801357f14ba1da74b578f75ce985a3b2ab68870c8044387021856a3bff001460d25380e7f015d5f7690eec6da39e13af070b7d9f8ca21c79fc31dba9036318dd6391765c78461009b565b61051c6101608801357f0edcbc45d0978c569efef488cb01fb485e129181db2edaeaf666d6ff0d5a0eec7f06e448908ca79d0b739e41ec9bfe3188ee629eaee11b3b1ca7bcf3e339a42f498461009b565b61056d6101808801357f294ad0cdd3c785ff94be3ac7e9363742aed8b3ae584f00c16c69f698cff2c5357f20e922b7231e6c28cd614fe3b405f9f89675be794a1c12c45cf6b457ca52570b8461009b565b6105be6101a08801357f1a32b7d8869f63861de3623b807a444dea0107005cb94de05870049c36f4472f7f1661dc35f5947e69f923c1c4b32f1043b851d7879d7d84929576859c2169c44d8461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f1254bc8617236dae90400ca85b729b705e85350d4574255706b0d91c3b6767a960c08301527f1dc775b13c574bd0f8b7e848e0c4a71d6420ea0b4b1f21ddf602da98d57a0e4160e08301527f2f46e45e56114d39653e3b99ee1f264250f8a9062905c6cdaea9b18480296a356101008301527f2651877537724ad6e21d4b7369e5d3e130857789cf2d896536835e05dd27b6ae6101208301527f0f4d53879a446071222c5ae24c32c562902902cfbf84c9ed5d7bd587a2bb2ea66101408301527f157cc30eee27d03a42f73c2104c523a44aea72940b179481323c0a4938935c00610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f0583b2d519950e404feb17cf642656363fec244b96ad87e0c0419fac2a6729496102808301527e0ebd85b6853a825e63c070f27f7dc368dffc6070ad058d52c361a6c51839a36102a08301527f15e5301ec43ad3834ac51f3a5d6fba97f80d3996aec7b93326dca6513b305ddf6102c08301527f1e9fe7e226aff01e5b59a52a1decb5ffaae8714257d531ba0c10947f5bfde5ac6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526108b96000840135610067565b6108c66020840135610067565b6108d36040840135610067565b6108e06060840135610067565b6108ed6080840135610067565b6108fa60a0840135610067565b61090760c0840135610067565b61091460e0840135610067565b610922610100840135610067565b610930610120840135610067565b61093e610140840135610067565b61094c610160840135610067565b61095a610180840135610067565b6109686101a0840135610067565b6109766101c0840135610067565b610983818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156109b3576109b2610992565b5b92915050565b6000819050826040600202820111156109d5576109d4610992565b5b92915050565b6000819050826020600e02820111156109f7576109f6610992565b5b92915050565b6000806000806102c08587031215610a1857610a1761098d565b5b6000610a2687828801610997565b9450506040610a37878288016109b9565b93505060c0610a4887828801610997565b925050610100610a5a878288016109db565b91505092959194509250565b60008115159050919050565b610a7b81610a66565b82525050565b6000602082019050610a966000830184610a72565b9291505056fea26469706673582212203fec525b3bcf543a9c0e05134a1f678ad4e18717df9fa9178d90affb36c968f864736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638d15f88f14610030575b600080fd5b61004a600480360381019061004591906109fd565b610060565b6040516100579190610a81565b60405180910390f35b60006108a1565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f1db453a10d41b0f5095ac588dc99f91e8798fc60013953cc11e273ea7115de7d81527f156d4f34407af104051b1d7f005920b42d95c4b91b0d650a04e18b600e20580260208201526101a960008801357f20922091325d875a858be5d6ae7fabf72286dab6985c03ab3bdb7785ea63e9f87f0e2935b6d6508b76b1ca9009cce4e9ce77b18201be83bd94572df976b40d31f28461009b565b6101f960208801357f2b4ed344b28f82a60a4880b51c3007c9b551b001be3ae3b52ffa62126da148677f2bcfde5dc98565f310a06fd59158706c73f299cbd846592a5745aa96798d82c98461009b565b61024960408801357f0a19cd10b89867d66a3ce2609d76d6c8ddc682a7a33ccf67346a708457911d6b7f12c713d6719ef9ba344aa01e14ab34a5ebe342879011a7427ed60f064cffbd5b8461009b565b61029960608801357f2d023ce9fff7e5ab260615b1cb3c404c43216e8ed04390e610c1652d3d42ca1f7f198b932491276a8517f2e483b9e89cc903fa90f219a036e6069eb6cbc6c713208461009b565b6102e960808801357f2dda546c828ff17316bdd786ffbab12a2131349c4a8da829697c24a11659637e7f05634f865da258ec007238066bbe78cb71ec4b3ad0d77f96a540201629215d8b8461009b565b61033960a08801357f0fdda6a3ac1ea338882e496977674b35639751720fa5c0b15a7ec228eeb2a1bb7f297e322c42383b4fc5bb3861b4d1fa920d662a7d451c362d9204aee2f9d12cb58461009b565b61038960c08801357f270b1e3a7c08e0259c51c018c763c329a5bd17d3ffa9161f4ba3b2ddc209a4187f118e92d58efc9e0f4ea29e9539f60c51f56d1e17b34369e904e0c80b53594e388461009b565b6103d960e08801357f09789c37cef912ddd947df34eaff7c96a42ffa184c890b61df3d118dfdee8f247f0ad05491c831e82b1dcf8ce4ddbc7fcc5dfe0d3a36b958fa76747c0f71e559858461009b565b6104296101008801357f0ce380e0896bba1e5b880bf941e73acc3ffc1e4a54ad986a4da7cd997158110d7e1e2c3867f0a4508d83c1c045a26283fcf6e65ab8ae4a11d138f6ac218f00a28461009b565b61047a6101208801357f1bed17a77e385bcf0994ae8d8ae36a32c45cd7a1cda025ca1dc7b4a0dec6d7ee7f05fffe73b964efdbea96c47c7a26bebb5855fad90b5bb36d33ccf980939dd97b8461009b565b6104cb6101408801357f14ba1da74b578f75ce985a3b2ab68870c8044387021856a3bff001460d25380e7f015d5f7690eec6da39e13af070b7d9f8ca21c79fc31dba9036318dd6391765c78461009b565b61051c6101608801357f0edcbc45d0978c569efef488cb01fb485e129181db2edaeaf666d6ff0d5a0eec7f06e448908ca79d0b739e41ec9bfe3188ee629eaee11b3b1ca7bcf3e339a42f498461009b565b61056d6101808801357f294ad0cdd3c785ff94be3ac7e9363742aed8b3ae584f00c16c69f698cff2c5357f20e922b7231e6c28cd614fe3b405f9f89675be794a1c12c45cf6b457ca52570b8461009b565b6105be6101a08801357f1a32b7d8869f63861de3623b807a444dea0107005cb94de05870049c36f4472f7f1661dc35f5947e69f923c1c4b32f1043b851d7879d7d84929576859c2169c44d8461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f1254bc8617236dae90400ca85b729b705e85350d4574255706b0d91c3b6767a960c08301527f1dc775b13c574bd0f8b7e848e0c4a71d6420ea0b4b1f21ddf602da98d57a0e4160e08301527f2f46e45e56114d39653e3b99ee1f264250f8a9062905c6cdaea9b18480296a356101008301527f2651877537724ad6e21d4b7369e5d3e130857789cf2d896536835e05dd27b6ae6101208301527f0f4d53879a446071222c5ae24c32c562902902cfbf84c9ed5d7bd587a2bb2ea66101408301527f157cc30eee27d03a42f73c2104c523a44aea72940b179481323c0a4938935c00610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f0583b2d519950e404feb17cf642656363fec244b96ad87e0c0419fac2a6729496102808301527e0ebd85b6853a825e63c070f27f7dc368dffc6070ad058d52c361a6c51839a36102a08301527f15e5301ec43ad3834ac51f3a5d6fba97f80d3996aec7b93326dca6513b305ddf6102c08301527f1e9fe7e226aff01e5b59a52a1decb5ffaae8714257d531ba0c10947f5bfde5ac6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526108b96000840135610067565b6108c66020840135610067565b6108d36040840135610067565b6108e06060840135610067565b6108ed6080840135610067565b6108fa60a0840135610067565b61090760c0840135610067565b61091460e0840135610067565b610922610100840135610067565b610930610120840135610067565b61093e610140840135610067565b61094c610160840135610067565b61095a610180840135610067565b6109686101a0840135610067565b6109766101c0840135610067565b610983818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156109b3576109b2610992565b5b92915050565b6000819050826040600202820111156109d5576109d4610992565b5b92915050565b6000819050826020600e02820111156109f7576109f6610992565b5b92915050565b6000806000806102c08587031215610a1857610a1761098d565b5b6000610a2687828801610997565b9450506040610a37878288016109b9565b93505060c0610a4887828801610997565b925050610100610a5a878288016109db565b91505092959194509250565b60008115159050919050565b610a7b81610a66565b82525050565b6000602082019050610a966000830184610a72565b9291505056fea26469706673582212203fec525b3bcf543a9c0e05134a1f678ad4e18717df9fa9178d90affb36c968f864736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}