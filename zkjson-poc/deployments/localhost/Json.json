{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierJSON",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "commit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "committer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "path2",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qCustom",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qFloat",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qInt",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qNull",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qRaw",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierJSON",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierRU",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x46358f95373798cd36ec607d2ae5e5f367462335ffdb12112282b1ff118bf14e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2257108",
    "logsBloom": "0x
    "blockHash": "0x8c5911002bedae4eb0948ec15cc115926a6e8f34a10bbce804f35039259df2c8",
    "transactionHash": "0x46358f95373798cd36ec607d2ae5e5f367462335ffdb12112282b1ff118bf14e",
    "logs": [],
    "blockNumber": 41,
    "cumulativeGasUsed": "2257108",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "73f022cb6ae58d036ad964ed3f0daab0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierJSON\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"commit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"committer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"path2\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qCustom\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qFloat\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qNull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qRaw\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierJSON\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierRU\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Json.sol\":\"Json\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Json.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"../sdk/contracts/ZKRollup.sol\\\";\\nimport \\\"../sdk/contracts/ZKJson.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n\\ninterface VerifierJSON {\\n  function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[12] calldata _pubSignals) view external returns (bool);\\n}\\n\\ncontract Json is ZKJson, ZKRollup {\\n  uint constant SIZE_PATH = 5;\\n  uint constant SIZE_VAL = 5;\\n  \\n  constructor (address _verifierJSON){\\n    verifierJSON = _verifierJSON;\\n  }\\n  \\n  function validateQuery(uint[] memory path, uint[] memory zkp) private view returns(uint[] memory){\\n\\n    verify(zkp, bytes4(abi.encode(true)), verifierJSON);\\n    console.log(\\\"verify Done\\\");\\n\\treturn _validateQueryRU(path, zkp, SIZE_PATH, SIZE_VAL);    \\n  }\\n\\n  function qInt (uint[] memory path, uint[] memory zkp) public view returns (int) {\\n    console.log(\\\"1\\\");\\n    uint[] memory value = validateQuery(path, zkp);\\n    console.log(\\\"2\\\");\\n    return _qInt(value);\\n  }\\n\\n  function qFloat (uint[] memory path, uint[] memory zkp) public view returns (uint[3] memory) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return _qFloat(value);\\n  }\\n\\n  function qRaw (uint[] memory path, uint[] memory zkp) public view returns (uint[] memory) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return _qRaw(value);\\n  }\\n  \\n  function qString (uint[] memory path, uint[] memory zkp) public view returns (string memory) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return _qString(value);\\n  }\\n\\n  function qBool (uint[] memory path, uint[] memory zkp) public view returns (bool) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return _qBool(value);\\n  }\\n  \\n  function qNull (uint[] memory path, uint[] memory zkp) public view returns (bool) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return _qNull(value);\\n  }\\n  \\n  function qCustom (uint[] memory path, uint[] memory path2, uint[] memory zkp) public view returns (int) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return getInt(path2, value);\\n  }\\n}\",\"keccak256\":\"0x3e09d0134656cc4698bb2359ca2debf353952c95ac1e30b70c1b07daa0a5386f\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"},\"sdk/contracts/ZKJson.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"./ZKQuery.sol\\\";\\n\\ncontract ZKJson is ZKQuery{\\n  address public verifierJSON;\\n\\n  function _validateQueryJSON(uint[] memory path, uint[] memory zkp, uint size_path, uint size_val) internal pure returns(uint[] memory){\\n    require(zkp[8] == 1, \\\"value doesn't exist\\\");\\n    for(uint i = 10; i < 10 + size_path; i++){\\n      require((path.length <= i - 10 && zkp[i] == 0) || path[i - 10] == zkp[i], \\\"wrong path\\\");\\n    }\\n    uint[] memory value = new uint[](size_val);\\n    for(uint i = 10 + size_path; i < 10 + size_path + size_val; i++){\\n      value[i - (10 + size_val)] = zkp[i];\\n    }\\n    return toArr(value);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xf6a6b334886282791288093df931e1dc04cc8975b4adfd2350e2bb9357714316\",\"license\":\"MIT\"},\"sdk/contracts/ZKQuery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ZKQuery {\\n\\n  function getPath(uint i, uint[] memory _json) private pure returns(uint[] memory, uint){\\n    uint[] memory _path;\\n    assembly {\\n      let json := add(_json, 0x20)\\n      let len := mload(add(json, mul(i, 0x20)))\\n      i := add(i, 1)\\n      _path := msize()\\n      mstore(_path, sub(mload(_json), i))\\n      let _path0 := add(_path, 0x20)\\n      mstore(_path0, len)\\n      let pi := 0x20\\n      for { let i2 := 0 } lt(i2, len) { i2 := add(i2, 1) } {\\n\\tlet plen := mload(add(json, mul(i, 0x20)))\\n        mstore(add(_path0, pi), plen)\\n\\tpi := add(pi, 0x20)\\n\\ti := add(i, 1)\\n\\tlet plen2 := 1\\n\\tif iszero(plen) {\\n          if iszero(mload(add(json, mul(i, 0x20)))){\\n\\t    plen2 := 2\\n          }\\n        }\\n\\tfor { let i3 := 0 } lt(i3, plen2) { i3 := add(i3, 1) } {\\n\\t  mstore(add(_path0, pi), mload(add(json, mul(i, 0x20))))\\n\\t  pi := add(pi, 0x20)\\n\\t  i := add(i, 1)\\n\\t}\\n      }\\n      mstore(_path, div(pi, 0x20))\\n      mstore(0x40, add(_path, add(0x20, pi)))\\n    }\\n    return (_path, i);\\n  }\\n\\n  function _getVal(uint i, uint[] memory _json) private pure returns(uint[] memory, uint){\\n    uint[] memory _val;\\n    assembly {\\n      let json := add(_json, 0x20)\\n      _val := msize()\\n      mstore(_val, sub(mload(_json), i))\\n      let _val0 := add(_val, 0x20)\\n      let _type := mload(add(json, mul(i, 0x20)))\\n      i := add(i, 1)\\n      let vlen := 0x20\\n      mstore(_val0, _type)\\n      let len := 0\\t\\n      if eq(_type, 1) {\\n\\tlen := 1\\n      }\\n      if eq(_type, 2) {\\n\\tlen := 3\\n      }\\n      if eq(_type, 3) {\\n\\tlen := add(mload(add(json, mul(i, 0x20))), 1)\\n      }\\n      for { let i2 := 0 } lt(i2, len) { i2 := add(i2, 1) } {\\n\\tmstore(add(_val0, vlen), mload(add(json, mul(i, 0x20))))\\t  \\n\\tvlen := add(vlen, 0x20)\\n        i := add(i, 1)\\n      }\\n      mstore(_val, div(vlen, 0x20))\\n      mstore(0x40, add(_val, add(0x20, vlen)))\\n    }\\n    return (_val, i);\\n  }\\n  \\n  function getVal(uint[] memory path, uint[] memory _json) private pure returns(uint[] memory){\\n    require (_json[0] == 4, \\\"not raw value\\\");\\n    uint[] memory path2 = toArr(path);\\n    uint i = 1;\\n    while(i < _json.length){\\n      (uint[] memory _path, uint i2) = getPath(i, _json);\\n      (uint[] memory _val2, uint i3) = _getVal(i2, _json);\\n      i = i3;\\n      uint path_match = 1;\\n      if(_path.length != path2.length){\\n\\tpath_match = 0;\\n      }else{\\n\\tfor(uint i4 = 0; i4 < path2.length; i4++){\\n\\t  if(_path[i4] != path2[i4]) path_match = 0;\\n\\t}\\n      }\\n      if(path_match == 1) return _val2;\\n    }\\n    require(false, \\\"value not found\\\");\\n  }\\n  \\n  function toArr(uint[] memory json) internal pure returns(uint[] memory){\\n    uint[]  memory _json;\\n    assembly {\\n      let ji := 0x0\\n      let prev := 0\\n      let start := add(json, 0x20)\\n      _json := msize()\\n      mstore(_json, mload(json))\\n      let _json0 := add(_json, 0x20)\\n      for { let i := 0 } lt(i, mload(json)) { i := add(i, 1) } {\\n\\tlet v := mload(add(start, mul(i, 0x20)))\\n\\tif gt(v,0) {  \\n\\t  let p := 0\\n\\t  let x := v\\n  \\t  let on := 0 // 0 = first, 1 = off, 2 = on, 3 = is9, 4 = to set zero, 5 = zero\\n\\t  let cur := 0\\n\\t  let len := 0\\n\\t  let num := 0\\n          for { } gt(v, 0) { } {\\n\\t    v := div(v, 10)\\n            p := add(p, 1)\\n          }\\n\\t  for { } gt(p, 0) { } {\\n\\t    let n := div(x, exp(10, sub(p, 1)))\\n\\t    let _on := on\\n\\t    if iszero(_on){\\n\\t      on := 1\\n\\t    }\\n\\t    if and(eq(_on, 1), iszero(n)) {\\n\\t        on := 4\\n\\t    }\\n    \\t    if eq(_on, 4) {\\n\\t        on := 5\\n\\t\\tlen := n\\n\\t    }\\t\\n\\t    if and(eq(_on, 1), gt(n, 0)) {\\n\\t      if eq(n, 9) {\\n\\t\\tlen := 8\\n\\t        on := 3       \\n\\t      }\\n\\t      if and(iszero(iszero(n)), iszero(eq(n,9))) {\\n\\t        on := 2\\n\\t\\tlen := n  \\n\\t      }\\n              cur := 0\\n\\t    }\\n\\t    if gt(_on, 1) {\\n\\t      if eq(_on, 5){\\n\\t\\tmstore(add(_json0, ji), n)\\n\\t\\tlen := sub(len, 1)\\n\\t\\tji := add(ji, 0x20)\\n\\t\\tif iszero(len) {\\n\\t\\t  cur := 0\\n\\t\\t  on := 1\\n\\t\\t  len := 0\\n\\t\\t  num := 0\\n\\t\\t}\\n\\t      }\\n\\t      if iszero(eq(_on, 5)){\\n                num := add(num, mul(n, exp(10, sub(sub(len, cur), 1))))\\n                cur := add(cur, 1)\\n                if eq(cur, len) {\\n                  prev := mul(prev, exp(10, len))\\n                  if eq(_on, 3) {\\n                    prev := add(prev, num)\\n                  }\\n\\t          if iszero(eq(_on, 3)) {\\n                    num := add(num, prev)\\n                    prev := 0\\n\\t\\t    mstore(add(_json0, ji), num)\\n                    ji := add(ji, 0x20)\\n                  }\\n                  cur := 0\\n                  on := 1\\n                  len := 0\\n                  num := 0\\n                }\\n\\t      }\\n            }\\n\\t    x := sub(x, mul(exp(10, sub(p, 1)), n))\\n\\t    p := sub(p, 1)\\n\\t  }\\n\\t}\\n      }\\n      mstore(_json, div(ji, 0x20))\\n      mstore(0x40, add(_json, add(0x20, ji)))\\n    }\\n    return _json;\\n  }\\n\\n  function _toString(uint8[] memory charCodes) private pure returns (string memory) {\\n    bytes memory stringBytes = new bytes(charCodes.length);\\n    for (uint i = 0; i < charCodes.length; i++) stringBytes[i] = bytes1(charCodes[i]);\\n    return string(stringBytes);\\n  }\\n\\n  function _qInt (uint[] memory value) internal pure returns (int) {\\n    require(value[0] == 2 && value[2] == 0, \\\"not int\\\");\\n    return int(value[3]) * (value[1] == 1 ? int(1) : int(-1));\\n  }\\n  \\n  function _qFloat (uint[] memory value) internal pure returns (uint[3] memory) {\\n    require(value[0] == 2 && value[2] != 0, \\\"not float\\\");\\n    uint[3] memory float;\\n    float[0] = value[1];\\n    float[1] = value[2];\\n    float[2] = value[3];\\n    return float;\\n  }\\n\\n  function _qRaw (uint[] memory value) internal pure returns (uint[] memory) {\\n    require(value[0] == 4, \\\"not object or array\\\");\\n    return value;\\n  }\\n  \\n  function _qString (uint[] memory value) internal pure returns (string memory) {\\n    require(value[0] == 3, \\\"not string\\\");\\n    uint8[] memory charCodes = new uint8[](value[1]);\\n    for(uint i = 0; i < value[1];i++) charCodes[i] = uint8(value[i+2]);\\n    string memory str = _toString(charCodes);\\n    return str;\\n  }\\n\\n  function _qBool (uint[] memory value) internal pure returns (bool) {\\n    require(value[0] == 1, \\\"not bool\\\");\\n    return value[1] == 1 ? true : false;\\n  }\\n  \\n  function _qNull (uint[] memory value) internal pure returns (bool) {\\n    require(value[0] == 0, \\\"not null\\\");\\n    return true;\\n  }\\n\\n  function _qCond (uint[] memory value, uint[] memory cond) internal pure returns (bool) {\\n    uint[] memory _cond = toArr(cond);\\n    require(value.length == _cond.length, \\\"wrong query\\\");\\n    for(uint i = 0; i < value.length; i++)  require(_cond[i] == value[i], \\\"wrong query\\\");\\n    return true;\\n  }\\n  \\n  function getInt (uint[] memory path, uint[] memory raw) internal pure returns (int) {\\n    uint[] memory value = getVal(path, raw);\\n    return _qInt(value);\\n  }\\n\\n  function getString (uint[] memory path, uint[] memory raw) internal pure returns (string memory) {\\n    uint[] memory value = getVal(path, raw);\\n    _qString(value);\\n  }\\n\\n  function getBool (uint[] memory path, uint[] memory raw) internal pure returns (bool) {\\n    uint[] memory value = getVal(path, raw);\\n    _qBool(value);\\n  }\\n\\n  function getNull (uint[] memory path, uint[] memory raw) internal pure returns (bool) {\\n    uint[] memory value = getVal(path, raw);\\n    _qNull(value);\\n  }\\n  \\n  function verify(uint[] memory zkp, bytes4 selector, address addr) internal view returns (bool) {\\n    uint size;\\n    assembly {\\n      size := extcodesize(addr)\\n    }\\n    require(size > 0, \\\"contract doesn't exist\\\");\\n    bool valid;\\n    assembly{\\n      let callData := mload(0x40)\\n      let zlen := mload(zkp)\\n      let clen := add(0x4, mul(0x20, zlen))\\n      mstore(callData, clen)\\n      mstore(add(callData, 0x20), selector)\\n      for { let i := 1 } lt(i, add(1, zlen)) { i := add(i, 1) } {\\n\\tmstore(add(callData, add(0x4, mul(i, 0x20))), mload(add(zkp, mul(i, 0x20))))\\n      }\\n      let success := staticcall(\\n        gas(),            \\n        addr,\\n\\tadd(callData, 0x20), \\n\\tclen,   \\n\\tcallData,         \\n\\t0x20          \\n      )\\n      if iszero(success) {\\n        revert(0, 0)\\n      }\\n      valid := mload(callData)\\n    }\\n    require(valid, \\\"invalid proof\\\");\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x3a1515209db84060c6f1a49da39549ca20c0d2434d1677777dbfabd475507554\",\"license\":\"MIT\"},\"sdk/contracts/ZKRollup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"./ZKQuery.sol\\\";\\n\\ninterface VerifierRU {\\n  function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[11] calldata _pubSignals) view external returns (bool);\\n\\n}\\n\\ncontract ZKRollup is ZKQuery {\\n  address public verifierRU;\\n  address public committer;\\n  uint public root;\\n  \\n  function _validateQueryRU(uint[] memory path, uint[] memory zkp, uint size_path, uint size_val) internal view returns(uint[] memory){\\n    require(zkp[19] == root, \\\"root mismatch\\\");\\n    require(zkp[size_path + size_val + 10] == path[0], \\\"wrong collection\\\");\\n    require(zkp[size_path + size_val + 11] == path[1], \\\"wrong doc\\\");\\n    require(zkp[8] == 1, \\\"value doesn't exist\\\");\\n    require(path.length <= size_path + size_val, \\\"path too long\\\");\\n    for(uint i = 9; i < 9 + path.length - 2; i++) require(path[i - 7] == zkp[i], \\\"wrong path\\\");\\n    uint[] memory value = new uint[](size_val);\\n    for(uint i = 9 + size_path; i < 9 + size_path + size_val; i++) value[i - (9 + size_path)] = zkp[i];\\n    return toArr(value);\\n  }\\n\\n  function commit (uint[] memory zkp) public returns (uint) {\\n    require (zkp[9] == root, \\\"wrong merkle root\\\");\\n    require(msg.sender == committer, \\\"sender is not committer\\\");\\n    root = zkp[8];\\n    verify(zkp,VerifierRU.verifyProof.selector, verifierRU);\\n    return root;\\n  }\\n}\\n\",\"keccak256\":\"0x66eb5b098eae7a811fb275bc399510f79eaa793f87f6c39b835b93b73e367efb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620028c9380380620028c98339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b61279f806200012a6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80637e232f9d116100715780637e232f9d146101c75780639ff73216146101f7578063b8aa6cb114610227578063d792668714610257578063e8357bed14610275578063ebf0c71714610293576100b4565b806312e8545f146100b957806359434d4a146100e95780635bc8e8f9146101195780637b86a97c146101375780637b870735146101675780637c47e8f114610197575b600080fd5b6100d360048036038101906100ce91906118d4565b6102b1565b6040516100e09190611994565b60405180910390f35b61010360048036038101906100fe91906119af565b6102d4565b6040516101109190611a07565b60405180910390f35b610121610426565b60405161012e9190611a63565b60405180910390f35b610151600480360381019061014c9190611a7e565b61044c565b60405161015e9190611b11565b60405180910390f35b610181600480360381019061017c9190611a7e565b61046d565b60405161018e9190611b11565b60405180910390f35b6101b160048036038101906101ac9190611a7e565b61048e565b6040516101be9190611bd7565b60405180910390f35b6101e160048036038101906101dc9190611a7e565b6104b6565b6040516101ee9190611c71565b60405180910390f35b610211600480360381019061020c9190611a7e565b6104d8565b60405161021e9190611994565b60405180910390f35b610241600480360381019061023c9190611a7e565b610576565b60405161024e9190611d2a565b60405180910390f35b61025f610598565b60405161026c9190611a63565b60405180910390f35b61027d6105bc565b60405161028a9190611a63565b60405180910390f35b61029b6105e2565b6040516102a89190611a07565b60405180910390f35b6000806102be85846105e8565b90506102ca8482610692565b9150509392505050565b6000600354826009815181106102ed576102ec611d4c565b5b602002602001015114610335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032c90611dc7565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bc90611e33565b60405180910390fd5b816008815181106103d9576103d8611d4c565b5b602002602001015160038190555061041b8263b9c6ea8760e01b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166106b3565b506003549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061045984846105e8565b9050610464816107a9565b91505092915050565b60008061047a84846105e8565b90506104858161083d565b91505092915050565b610496611705565b60006104a284846105e8565b90506104ad816108a5565b91505092915050565b606060006104c484846105e8565b90506104cf816109ef565b91505092915050565b60006105186040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250610b56565b600061052484846105e8565b90506105646040518060400160405280600181526020017f3200000000000000000000000000000000000000000000000000000000000000815250610b56565b61056d81610bef565b91505092915050565b6060600061058484846105e8565b905061058f81610cef565b91505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b606061063e8260016040516020016106009190611b11565b60405160208183030381529060405261061890611ebc565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166106b3565b5061067d6040518060400160405280600b81526020017f76657269667920446f6e65000000000000000000000000000000000000000000815250610b56565b61068a8383600580610d57565b905092915050565b60008061069f8484611136565b90506106aa81610bef565b91505092915050565b600080823b9050600081116106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490611f6f565b60405180910390fd5b600060405186518060200260040180835287602084015260015b8260010181101561073e57602081028a015160208202600401850152600181019050610717565b5060208382602086018a5afa8061075457600080fd5b83519450505050508061079c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079390611fdb565b60405180910390fd5b6001925050509392505050565b60006001826000815181106107c1576107c0611d4c565b5b602002602001015114610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090612047565b60405180910390fd5b60018260018151811061081f5761081e611d4c565b5b602002602001015114610833576000610836565b60015b9050919050565b6000808260008151811061085457610853611d4c565b5b60200260200101511461089c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610893906120b3565b60405180910390fd5b60019050919050565b6108ad611705565b6002826000815181106108c3576108c2611d4c565b5b60200260200101511480156108f457506000826002815181106108e9576108e8611d4c565b5b602002602001015114155b610933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092a9061211f565b60405180910390fd5b61093b611705565b8260018151811061094f5761094e611d4c565b5b60200260200101518160006003811061096b5761096a611d4c565b5b6020020181815250508260028151811061098857610987611d4c565b5b6020026020010151816001600381106109a4576109a3611d4c565b5b602002018181525050826003815181106109c1576109c0611d4c565b5b6020026020010151816002600381106109dd576109dc611d4c565b5b60200201818152505080915050919050565b6060600382600081518110610a0757610a06611d4c565b5b602002602001015114610a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a469061218b565b60405180910390fd5b600082600181518110610a6557610a64611d4c565b5b602002602001015167ffffffffffffffff811115610a8657610a8561175b565b5b604051908082528060200260200182016040528015610ab45781602001602082028036833780820191505090505b50905060005b83600181518110610ace57610acd611d4c565b5b6020026020010151811015610b3e5783600282610aeb91906121da565b81518110610afc57610afb611d4c565b5b6020026020010151828281518110610b1757610b16611d4c565b5b602002602001019060ff16908160ff16815250508080610b369061220e565b915050610aba565b506000610b4a826112bc565b90508092505050919050565b610bec81604051602401610b6a9190611c71565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611399565b50565b6000600282600081518110610c0757610c06611d4c565b5b6020026020010151148015610c375750600082600281518110610c2d57610c2c611d4c565b5b6020026020010151145b610c76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6d906122a2565b60405180910390fd5b600182600181518110610c8c57610c8b611d4c565b5b602002602001015114610cbf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610cc2565b60015b82600381518110610cd657610cd5611d4c565b5b6020026020010151610ce891906122c2565b9050919050565b6060600482600081518110610d0757610d06611d4c565b5b602002602001015114610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4690612386565b60405180910390fd5b819050919050565b606060035484601381518110610d7057610d6f611d4c565b5b602002602001015114610db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610daf906123f2565b60405180910390fd5b84600081518110610dcc57610dcb611d4c565b5b602002602001015184600a8486610de391906121da565b610ded91906121da565b81518110610dfe57610dfd611d4c565b5b602002602001015114610e46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3d9061245e565b60405180910390fd5b84600181518110610e5a57610e59611d4c565b5b602002602001015184600b8486610e7191906121da565b610e7b91906121da565b81518110610e8c57610e8b611d4c565b5b602002602001015114610ed4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecb906124ca565b60405180910390fd5b600184600881518110610eea57610ee9611d4c565b5b602002602001015114610f32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2990612536565b60405180910390fd5b8183610f3e91906121da565b85511115610f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f78906125a2565b60405180910390fd5b6000600990505b600286516009610f9891906121da565b610fa291906125c2565b81101561103e57848181518110610fbc57610fbb611d4c565b5b602002602001015186600783610fd291906125c2565b81518110610fe357610fe2611d4c565b5b60200260200101511461102b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102290612642565b60405180910390fd5b80806110369061220e565b915050610f88565b5060008267ffffffffffffffff81111561105b5761105a61175b565b5b6040519080825280602002602001820160405280156110895781602001602082028036833780820191505090505b509050600084600961109b91906121da565b90505b838560096110ac91906121da565b6110b691906121da565b811015611121578581815181106110d0576110cf611d4c565b5b6020026020010151828660096110e691906121da565b836110f191906125c2565b8151811061110257611101611d4c565b5b60200260200101818152505080806111199061220e565b91505061109e565b5061112b816113b3565b915050949350505050565b606060048260008151811061114e5761114d611d4c565b5b602002602001015114611196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118d906126ae565b60405180910390fd5b60006111a1846113b3565b90506000600190505b8351811015611272576000806111c0838761156e565b915091506000806111d1838961162f565b9150915080945060006001905086518551146111f05760009050611251565b60005b875181101561124f5787818151811061120f5761120e611d4c565b5b602002602001015186828151811061122a57611229611d4c565b5b60200260200101511461123c57600091505b80806112479061220e565b9150506111f3565b505b6001810361126857829750505050505050506112b6565b50505050506111aa565b60006112b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112aa9061271a565b60405180910390fd5b50505b92915050565b60606000825167ffffffffffffffff8111156112db576112da61175b565b5b6040519080825280601f01601f19166020018201604052801561130d5781602001600182028036833780820191505090505b50905060005b835181101561138f5783818151811061132f5761132e611d4c565b5b602002602001015160f81b82828151811061134d5761134c611d4c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806113879061220e565b915050611313565b5080915050919050565b6113b0816113a86116d96116fa565b63ffffffff16565b50565b60608060008060208501599350855184526020840160005b875181101561155157602081028301516000811115611545576000816000806000805b600087111561140857600a870496506001860195506113ee565b5b600086111561153e5760018603600a0a8504848061142657600195505b811560018214161561143757600495505b6004810361144757600595508193505b6000821160018214161561148157600982036114665760089350600395505b6009821415821515161561147c57600295508193505b600094505b600181111561152457600581036114ba57818e8c015260018403935060208e019d50836114b957600094506001955060009350600092505b5b6005811461152357600185850303600a0a8202830192506001850194508385036115225783600a0a8d029c50600381036114f457828d019c505b60038114611511578c8301925060009c50828e8c015260208e019d505b600094506001955060009350600092505b5b5b8160018903600a0a02870396506001880397505050611409565b5050505050505b506001810190506113cb565b506020840485528360200185016040525050505080915050919050565b606060006060602084016020860281015160018701965059925086865103835260208301818152602060005b8381101561160d5760208a02850151808385015260208301925060018b019a506001816115d25760208c028701516115d157600290505b5b60005b818110156115ff5760208d028801518587015260208501945060018d019c506001810190506115d5565b50505060018101905061159a565b5060208104855280602001850160405250505050808592509250509250929050565b606060006060602084015991508585510382526020820160208702820151600188019750602081835260006001830361166757600190505b6002830361167457600390505b6003830361168957600160208b028601510190505b60005b818110156116b65760208b028601518386015260208301925060018b019a5060018101905061168c565b506020820486528160200186016040525050505050808592509250509250929050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b611727819050919050565b6040518060600160405280600390602082028036833780820191505090505090565b61172f61273a565b565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117938261174a565b810181811067ffffffffffffffff821117156117b2576117b161175b565b5b80604052505050565b60006117c5611731565b90506117d1828261178a565b919050565b600067ffffffffffffffff8211156117f1576117f061175b565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61181a81611807565b811461182557600080fd5b50565b60008135905061183781611811565b92915050565b600061185061184b846117d6565b6117bb565b9050808382526020820190506020840283018581111561187357611872611802565b5b835b8181101561189c57806118888882611828565b845260208401935050602081019050611875565b5050509392505050565b600082601f8301126118bb576118ba611745565b5b81356118cb84826020860161183d565b91505092915050565b6000806000606084860312156118ed576118ec61173b565b5b600084013567ffffffffffffffff81111561190b5761190a611740565b5b611917868287016118a6565b935050602084013567ffffffffffffffff81111561193857611937611740565b5b611944868287016118a6565b925050604084013567ffffffffffffffff81111561196557611964611740565b5b611971868287016118a6565b9150509250925092565b6000819050919050565b61198e8161197b565b82525050565b60006020820190506119a96000830184611985565b92915050565b6000602082840312156119c5576119c461173b565b5b600082013567ffffffffffffffff8111156119e3576119e2611740565b5b6119ef848285016118a6565b91505092915050565b611a0181611807565b82525050565b6000602082019050611a1c60008301846119f8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a4d82611a22565b9050919050565b611a5d81611a42565b82525050565b6000602082019050611a786000830184611a54565b92915050565b60008060408385031215611a9557611a9461173b565b5b600083013567ffffffffffffffff811115611ab357611ab2611740565b5b611abf858286016118a6565b925050602083013567ffffffffffffffff811115611ae057611adf611740565b5b611aec858286016118a6565b9150509250929050565b60008115159050919050565b611b0b81611af6565b82525050565b6000602082019050611b266000830184611b02565b92915050565b600060039050919050565b600081905092915050565b6000819050919050565b611b5581611807565b82525050565b6000611b678383611b4c565b60208301905092915050565b6000602082019050919050565b611b8981611b2c565b611b938184611b37565b9250611b9e82611b42565b8060005b83811015611bcf578151611bb68782611b5b565b9650611bc183611b73565b925050600181019050611ba2565b505050505050565b6000606082019050611bec6000830184611b80565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c2c578082015181840152602081019050611c11565b60008484015250505050565b6000611c4382611bf2565b611c4d8185611bfd565b9350611c5d818560208601611c0e565b611c668161174a565b840191505092915050565b60006020820190508181036000830152611c8b8184611c38565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000602082019050919050565b6000611cd782611c93565b611ce18185611c9e565b9350611cec83611caf565b8060005b83811015611d1d578151611d048882611b5b565b9750611d0f83611cbf565b925050600181019050611cf0565b5085935050505092915050565b60006020820190508181036000830152611d448184611ccc565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f77726f6e67206d65726b6c6520726f6f74000000000000000000000000000000600082015250565b6000611db1601183611bfd565b9150611dbc82611d7b565b602082019050919050565b60006020820190508181036000830152611de081611da4565b9050919050565b7f73656e646572206973206e6f7420636f6d6d6974746572000000000000000000600082015250565b6000611e1d601783611bfd565b9150611e2882611de7565b602082019050919050565b60006020820190508181036000830152611e4c81611e10565b9050919050565b600081519050919050565b6000819050602082019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000611ea68251611e6e565b80915050919050565b600082821b905092915050565b6000611ec782611e53565b82611ed184611e5e565b9050611edc81611e9a565b92506004821015611f1c57611f177fffffffff0000000000000000000000000000000000000000000000000000000083600403600802611eaf565b831692505b5050919050565b7f636f6e747261637420646f65736e277420657869737400000000000000000000600082015250565b6000611f59601683611bfd565b9150611f6482611f23565b602082019050919050565b60006020820190508181036000830152611f8881611f4c565b9050919050565b7f696e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b6000611fc5600d83611bfd565b9150611fd082611f8f565b602082019050919050565b60006020820190508181036000830152611ff481611fb8565b9050919050565b7f6e6f7420626f6f6c000000000000000000000000000000000000000000000000600082015250565b6000612031600883611bfd565b915061203c82611ffb565b602082019050919050565b6000602082019050818103600083015261206081612024565b9050919050565b7f6e6f74206e756c6c000000000000000000000000000000000000000000000000600082015250565b600061209d600883611bfd565b91506120a882612067565b602082019050919050565b600060208201905081810360008301526120cc81612090565b9050919050565b7f6e6f7420666c6f61740000000000000000000000000000000000000000000000600082015250565b6000612109600983611bfd565b9150612114826120d3565b602082019050919050565b60006020820190508181036000830152612138816120fc565b9050919050565b7f6e6f7420737472696e6700000000000000000000000000000000000000000000600082015250565b6000612175600a83611bfd565b91506121808261213f565b602082019050919050565b600060208201905081810360008301526121a481612168565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121e582611807565b91506121f083611807565b9250828201905080821115612208576122076121ab565b5b92915050565b600061221982611807565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361224b5761224a6121ab565b5b600182019050919050565b7f6e6f7420696e7400000000000000000000000000000000000000000000000000600082015250565b600061228c600783611bfd565b915061229782612256565b602082019050919050565b600060208201905081810360008301526122bb8161227f565b9050919050565b60006122cd8261197b565b91506122d88361197b565b92508282026122e68161197b565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561231e5761231d6121ab565b5b8282058414831517612333576123326121ab565b5b5092915050565b7f6e6f74206f626a656374206f7220617272617900000000000000000000000000600082015250565b6000612370601383611bfd565b915061237b8261233a565b602082019050919050565b6000602082019050818103600083015261239f81612363565b9050919050565b7f726f6f74206d69736d6174636800000000000000000000000000000000000000600082015250565b60006123dc600d83611bfd565b91506123e7826123a6565b602082019050919050565b6000602082019050818103600083015261240b816123cf565b9050919050565b7f77726f6e6720636f6c6c656374696f6e00000000000000000000000000000000600082015250565b6000612448601083611bfd565b915061245382612412565b602082019050919050565b600060208201905081810360008301526124778161243b565b9050919050565b7f77726f6e6720646f630000000000000000000000000000000000000000000000600082015250565b60006124b4600983611bfd565b91506124bf8261247e565b602082019050919050565b600060208201905081810360008301526124e3816124a7565b9050919050565b7f76616c756520646f65736e277420657869737400000000000000000000000000600082015250565b6000612520601383611bfd565b915061252b826124ea565b602082019050919050565b6000602082019050818103600083015261254f81612513565b9050919050565b7f7061746820746f6f206c6f6e6700000000000000000000000000000000000000600082015250565b600061258c600d83611bfd565b915061259782612556565b602082019050919050565b600060208201905081810360008301526125bb8161257f565b9050919050565b60006125cd82611807565b91506125d883611807565b92508282039050818111156125f0576125ef6121ab565b5b92915050565b7f77726f6e67207061746800000000000000000000000000000000000000000000600082015250565b600061262c600a83611bfd565b9150612637826125f6565b602082019050919050565b6000602082019050818103600083015261265b8161261f565b9050919050565b7f6e6f74207261772076616c756500000000000000000000000000000000000000600082015250565b6000612698600d83611bfd565b91506126a382612662565b602082019050919050565b600060208201905081810360008301526126c78161268b565b9050919050565b7f76616c7565206e6f7420666f756e640000000000000000000000000000000000600082015250565b6000612704600f83611bfd565b915061270f826126ce565b602082019050919050565b60006020820190508181036000830152612733816126f7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220fce27247b4aa347efade15f8545a40f2a1b93eeca70d3c692f69dc7b9671e55f64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80637e232f9d116100715780637e232f9d146101c75780639ff73216146101f7578063b8aa6cb114610227578063d792668714610257578063e8357bed14610275578063ebf0c71714610293576100b4565b806312e8545f146100b957806359434d4a146100e95780635bc8e8f9146101195780637b86a97c146101375780637b870735146101675780637c47e8f114610197575b600080fd5b6100d360048036038101906100ce91906118d4565b6102b1565b6040516100e09190611994565b60405180910390f35b61010360048036038101906100fe91906119af565b6102d4565b6040516101109190611a07565b60405180910390f35b610121610426565b60405161012e9190611a63565b60405180910390f35b610151600480360381019061014c9190611a7e565b61044c565b60405161015e9190611b11565b60405180910390f35b610181600480360381019061017c9190611a7e565b61046d565b60405161018e9190611b11565b60405180910390f35b6101b160048036038101906101ac9190611a7e565b61048e565b6040516101be9190611bd7565b60405180910390f35b6101e160048036038101906101dc9190611a7e565b6104b6565b6040516101ee9190611c71565b60405180910390f35b610211600480360381019061020c9190611a7e565b6104d8565b60405161021e9190611994565b60405180910390f35b610241600480360381019061023c9190611a7e565b610576565b60405161024e9190611d2a565b60405180910390f35b61025f610598565b60405161026c9190611a63565b60405180910390f35b61027d6105bc565b60405161028a9190611a63565b60405180910390f35b61029b6105e2565b6040516102a89190611a07565b60405180910390f35b6000806102be85846105e8565b90506102ca8482610692565b9150509392505050565b6000600354826009815181106102ed576102ec611d4c565b5b602002602001015114610335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032c90611dc7565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bc90611e33565b60405180910390fd5b816008815181106103d9576103d8611d4c565b5b602002602001015160038190555061041b8263b9c6ea8760e01b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166106b3565b506003549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061045984846105e8565b9050610464816107a9565b91505092915050565b60008061047a84846105e8565b90506104858161083d565b91505092915050565b610496611705565b60006104a284846105e8565b90506104ad816108a5565b91505092915050565b606060006104c484846105e8565b90506104cf816109ef565b91505092915050565b60006105186040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250610b56565b600061052484846105e8565b90506105646040518060400160405280600181526020017f3200000000000000000000000000000000000000000000000000000000000000815250610b56565b61056d81610bef565b91505092915050565b6060600061058484846105e8565b905061058f81610cef565b91505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b606061063e8260016040516020016106009190611b11565b60405160208183030381529060405261061890611ebc565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166106b3565b5061067d6040518060400160405280600b81526020017f76657269667920446f6e65000000000000000000000000000000000000000000815250610b56565b61068a8383600580610d57565b905092915050565b60008061069f8484611136565b90506106aa81610bef565b91505092915050565b600080823b9050600081116106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490611f6f565b60405180910390fd5b600060405186518060200260040180835287602084015260015b8260010181101561073e57602081028a015160208202600401850152600181019050610717565b5060208382602086018a5afa8061075457600080fd5b83519450505050508061079c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079390611fdb565b60405180910390fd5b6001925050509392505050565b60006001826000815181106107c1576107c0611d4c565b5b602002602001015114610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090612047565b60405180910390fd5b60018260018151811061081f5761081e611d4c565b5b602002602001015114610833576000610836565b60015b9050919050565b6000808260008151811061085457610853611d4c565b5b60200260200101511461089c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610893906120b3565b60405180910390fd5b60019050919050565b6108ad611705565b6002826000815181106108c3576108c2611d4c565b5b60200260200101511480156108f457506000826002815181106108e9576108e8611d4c565b5b602002602001015114155b610933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092a9061211f565b60405180910390fd5b61093b611705565b8260018151811061094f5761094e611d4c565b5b60200260200101518160006003811061096b5761096a611d4c565b5b6020020181815250508260028151811061098857610987611d4c565b5b6020026020010151816001600381106109a4576109a3611d4c565b5b602002018181525050826003815181106109c1576109c0611d4c565b5b6020026020010151816002600381106109dd576109dc611d4c565b5b60200201818152505080915050919050565b6060600382600081518110610a0757610a06611d4c565b5b602002602001015114610a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a469061218b565b60405180910390fd5b600082600181518110610a6557610a64611d4c565b5b602002602001015167ffffffffffffffff811115610a8657610a8561175b565b5b604051908082528060200260200182016040528015610ab45781602001602082028036833780820191505090505b50905060005b83600181518110610ace57610acd611d4c565b5b6020026020010151811015610b3e5783600282610aeb91906121da565b81518110610afc57610afb611d4c565b5b6020026020010151828281518110610b1757610b16611d4c565b5b602002602001019060ff16908160ff16815250508080610b369061220e565b915050610aba565b506000610b4a826112bc565b90508092505050919050565b610bec81604051602401610b6a9190611c71565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611399565b50565b6000600282600081518110610c0757610c06611d4c565b5b6020026020010151148015610c375750600082600281518110610c2d57610c2c611d4c565b5b6020026020010151145b610c76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6d906122a2565b60405180910390fd5b600182600181518110610c8c57610c8b611d4c565b5b602002602001015114610cbf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610cc2565b60015b82600381518110610cd657610cd5611d4c565b5b6020026020010151610ce891906122c2565b9050919050565b6060600482600081518110610d0757610d06611d4c565b5b602002602001015114610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4690612386565b60405180910390fd5b819050919050565b606060035484601381518110610d7057610d6f611d4c565b5b602002602001015114610db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610daf906123f2565b60405180910390fd5b84600081518110610dcc57610dcb611d4c565b5b602002602001015184600a8486610de391906121da565b610ded91906121da565b81518110610dfe57610dfd611d4c565b5b602002602001015114610e46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3d9061245e565b60405180910390fd5b84600181518110610e5a57610e59611d4c565b5b602002602001015184600b8486610e7191906121da565b610e7b91906121da565b81518110610e8c57610e8b611d4c565b5b602002602001015114610ed4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecb906124ca565b60405180910390fd5b600184600881518110610eea57610ee9611d4c565b5b602002602001015114610f32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2990612536565b60405180910390fd5b8183610f3e91906121da565b85511115610f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f78906125a2565b60405180910390fd5b6000600990505b600286516009610f9891906121da565b610fa291906125c2565b81101561103e57848181518110610fbc57610fbb611d4c565b5b602002602001015186600783610fd291906125c2565b81518110610fe357610fe2611d4c565b5b60200260200101511461102b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102290612642565b60405180910390fd5b80806110369061220e565b915050610f88565b5060008267ffffffffffffffff81111561105b5761105a61175b565b5b6040519080825280602002602001820160405280156110895781602001602082028036833780820191505090505b509050600084600961109b91906121da565b90505b838560096110ac91906121da565b6110b691906121da565b811015611121578581815181106110d0576110cf611d4c565b5b6020026020010151828660096110e691906121da565b836110f191906125c2565b8151811061110257611101611d4c565b5b60200260200101818152505080806111199061220e565b91505061109e565b5061112b816113b3565b915050949350505050565b606060048260008151811061114e5761114d611d4c565b5b602002602001015114611196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118d906126ae565b60405180910390fd5b60006111a1846113b3565b90506000600190505b8351811015611272576000806111c0838761156e565b915091506000806111d1838961162f565b9150915080945060006001905086518551146111f05760009050611251565b60005b875181101561124f5787818151811061120f5761120e611d4c565b5b602002602001015186828151811061122a57611229611d4c565b5b60200260200101511461123c57600091505b80806112479061220e565b9150506111f3565b505b6001810361126857829750505050505050506112b6565b50505050506111aa565b60006112b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112aa9061271a565b60405180910390fd5b50505b92915050565b60606000825167ffffffffffffffff8111156112db576112da61175b565b5b6040519080825280601f01601f19166020018201604052801561130d5781602001600182028036833780820191505090505b50905060005b835181101561138f5783818151811061132f5761132e611d4c565b5b602002602001015160f81b82828151811061134d5761134c611d4c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806113879061220e565b915050611313565b5080915050919050565b6113b0816113a86116d96116fa565b63ffffffff16565b50565b60608060008060208501599350855184526020840160005b875181101561155157602081028301516000811115611545576000816000806000805b600087111561140857600a870496506001860195506113ee565b5b600086111561153e5760018603600a0a8504848061142657600195505b811560018214161561143757600495505b6004810361144757600595508193505b6000821160018214161561148157600982036114665760089350600395505b6009821415821515161561147c57600295508193505b600094505b600181111561152457600581036114ba57818e8c015260018403935060208e019d50836114b957600094506001955060009350600092505b5b6005811461152357600185850303600a0a8202830192506001850194508385036115225783600a0a8d029c50600381036114f457828d019c505b60038114611511578c8301925060009c50828e8c015260208e019d505b600094506001955060009350600092505b5b5b8160018903600a0a02870396506001880397505050611409565b5050505050505b506001810190506113cb565b506020840485528360200185016040525050505080915050919050565b606060006060602084016020860281015160018701965059925086865103835260208301818152602060005b8381101561160d5760208a02850151808385015260208301925060018b019a506001816115d25760208c028701516115d157600290505b5b60005b818110156115ff5760208d028801518587015260208501945060018d019c506001810190506115d5565b50505060018101905061159a565b5060208104855280602001850160405250505050808592509250509250929050565b606060006060602084015991508585510382526020820160208702820151600188019750602081835260006001830361166757600190505b6002830361167457600390505b6003830361168957600160208b028601510190505b60005b818110156116b65760208b028601518386015260208301925060018b019a5060018101905061168c565b506020820486528160200186016040525050505050808592509250509250929050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b611727819050919050565b6040518060600160405280600390602082028036833780820191505090505090565b61172f61273a565b565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117938261174a565b810181811067ffffffffffffffff821117156117b2576117b161175b565b5b80604052505050565b60006117c5611731565b90506117d1828261178a565b919050565b600067ffffffffffffffff8211156117f1576117f061175b565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61181a81611807565b811461182557600080fd5b50565b60008135905061183781611811565b92915050565b600061185061184b846117d6565b6117bb565b9050808382526020820190506020840283018581111561187357611872611802565b5b835b8181101561189c57806118888882611828565b845260208401935050602081019050611875565b5050509392505050565b600082601f8301126118bb576118ba611745565b5b81356118cb84826020860161183d565b91505092915050565b6000806000606084860312156118ed576118ec61173b565b5b600084013567ffffffffffffffff81111561190b5761190a611740565b5b611917868287016118a6565b935050602084013567ffffffffffffffff81111561193857611937611740565b5b611944868287016118a6565b925050604084013567ffffffffffffffff81111561196557611964611740565b5b611971868287016118a6565b9150509250925092565b6000819050919050565b61198e8161197b565b82525050565b60006020820190506119a96000830184611985565b92915050565b6000602082840312156119c5576119c461173b565b5b600082013567ffffffffffffffff8111156119e3576119e2611740565b5b6119ef848285016118a6565b91505092915050565b611a0181611807565b82525050565b6000602082019050611a1c60008301846119f8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a4d82611a22565b9050919050565b611a5d81611a42565b82525050565b6000602082019050611a786000830184611a54565b92915050565b60008060408385031215611a9557611a9461173b565b5b600083013567ffffffffffffffff811115611ab357611ab2611740565b5b611abf858286016118a6565b925050602083013567ffffffffffffffff811115611ae057611adf611740565b5b611aec858286016118a6565b9150509250929050565b60008115159050919050565b611b0b81611af6565b82525050565b6000602082019050611b266000830184611b02565b92915050565b600060039050919050565b600081905092915050565b6000819050919050565b611b5581611807565b82525050565b6000611b678383611b4c565b60208301905092915050565b6000602082019050919050565b611b8981611b2c565b611b938184611b37565b9250611b9e82611b42565b8060005b83811015611bcf578151611bb68782611b5b565b9650611bc183611b73565b925050600181019050611ba2565b505050505050565b6000606082019050611bec6000830184611b80565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c2c578082015181840152602081019050611c11565b60008484015250505050565b6000611c4382611bf2565b611c4d8185611bfd565b9350611c5d818560208601611c0e565b611c668161174a565b840191505092915050565b60006020820190508181036000830152611c8b8184611c38565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000602082019050919050565b6000611cd782611c93565b611ce18185611c9e565b9350611cec83611caf565b8060005b83811015611d1d578151611d048882611b5b565b9750611d0f83611cbf565b925050600181019050611cf0565b5085935050505092915050565b60006020820190508181036000830152611d448184611ccc565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f77726f6e67206d65726b6c6520726f6f74000000000000000000000000000000600082015250565b6000611db1601183611bfd565b9150611dbc82611d7b565b602082019050919050565b60006020820190508181036000830152611de081611da4565b9050919050565b7f73656e646572206973206e6f7420636f6d6d6974746572000000000000000000600082015250565b6000611e1d601783611bfd565b9150611e2882611de7565b602082019050919050565b60006020820190508181036000830152611e4c81611e10565b9050919050565b600081519050919050565b6000819050602082019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000611ea68251611e6e565b80915050919050565b600082821b905092915050565b6000611ec782611e53565b82611ed184611e5e565b9050611edc81611e9a565b92506004821015611f1c57611f177fffffffff0000000000000000000000000000000000000000000000000000000083600403600802611eaf565b831692505b5050919050565b7f636f6e747261637420646f65736e277420657869737400000000000000000000600082015250565b6000611f59601683611bfd565b9150611f6482611f23565b602082019050919050565b60006020820190508181036000830152611f8881611f4c565b9050919050565b7f696e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b6000611fc5600d83611bfd565b9150611fd082611f8f565b602082019050919050565b60006020820190508181036000830152611ff481611fb8565b9050919050565b7f6e6f7420626f6f6c000000000000000000000000000000000000000000000000600082015250565b6000612031600883611bfd565b915061203c82611ffb565b602082019050919050565b6000602082019050818103600083015261206081612024565b9050919050565b7f6e6f74206e756c6c000000000000000000000000000000000000000000000000600082015250565b600061209d600883611bfd565b91506120a882612067565b602082019050919050565b600060208201905081810360008301526120cc81612090565b9050919050565b7f6e6f7420666c6f61740000000000000000000000000000000000000000000000600082015250565b6000612109600983611bfd565b9150612114826120d3565b602082019050919050565b60006020820190508181036000830152612138816120fc565b9050919050565b7f6e6f7420737472696e6700000000000000000000000000000000000000000000600082015250565b6000612175600a83611bfd565b91506121808261213f565b602082019050919050565b600060208201905081810360008301526121a481612168565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121e582611807565b91506121f083611807565b9250828201905080821115612208576122076121ab565b5b92915050565b600061221982611807565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361224b5761224a6121ab565b5b600182019050919050565b7f6e6f7420696e7400000000000000000000000000000000000000000000000000600082015250565b600061228c600783611bfd565b915061229782612256565b602082019050919050565b600060208201905081810360008301526122bb8161227f565b9050919050565b60006122cd8261197b565b91506122d88361197b565b92508282026122e68161197b565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561231e5761231d6121ab565b5b8282058414831517612333576123326121ab565b5b5092915050565b7f6e6f74206f626a656374206f7220617272617900000000000000000000000000600082015250565b6000612370601383611bfd565b915061237b8261233a565b602082019050919050565b6000602082019050818103600083015261239f81612363565b9050919050565b7f726f6f74206d69736d6174636800000000000000000000000000000000000000600082015250565b60006123dc600d83611bfd565b91506123e7826123a6565b602082019050919050565b6000602082019050818103600083015261240b816123cf565b9050919050565b7f77726f6e6720636f6c6c656374696f6e00000000000000000000000000000000600082015250565b6000612448601083611bfd565b915061245382612412565b602082019050919050565b600060208201905081810360008301526124778161243b565b9050919050565b7f77726f6e6720646f630000000000000000000000000000000000000000000000600082015250565b60006124b4600983611bfd565b91506124bf8261247e565b602082019050919050565b600060208201905081810360008301526124e3816124a7565b9050919050565b7f76616c756520646f65736e277420657869737400000000000000000000000000600082015250565b6000612520601383611bfd565b915061252b826124ea565b602082019050919050565b6000602082019050818103600083015261254f81612513565b9050919050565b7f7061746820746f6f206c6f6e6700000000000000000000000000000000000000600082015250565b600061258c600d83611bfd565b915061259782612556565b602082019050919050565b600060208201905081810360008301526125bb8161257f565b9050919050565b60006125cd82611807565b91506125d883611807565b92508282039050818111156125f0576125ef6121ab565b5b92915050565b7f77726f6e67207061746800000000000000000000000000000000000000000000600082015250565b600061262c600a83611bfd565b9150612637826125f6565b602082019050919050565b6000602082019050818103600083015261265b8161261f565b9050919050565b7f6e6f74207261772076616c756500000000000000000000000000000000000000600082015250565b6000612698600d83611bfd565b91506126a382612662565b602082019050919050565b600060208201905081810360008301526126c78161268b565b9050919050565b7f76616c7565206e6f7420666f756e640000000000000000000000000000000000600082015250565b6000612704600f83611bfd565b915061270f826126ce565b602082019050919050565b60006020820190508181036000830152612733816126f7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220fce27247b4aa347efade15f8545a40f2a1b93eeca70d3c692f69dc7b9671e55f64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8380,
        "contract": "contracts/Json.sol:Json",
        "label": "verifierJSON",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9197,
        "contract": "contracts/Json.sol:Json",
        "label": "verifierRU",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9199,
        "contract": "contracts/Json.sol:Json",
        "label": "committer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9201,
        "contract": "contracts/Json.sol:Json",
        "label": "root",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}