{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierJSON",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "commit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "committer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "path2",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qCustom",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qFloat",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qInt",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qNull",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qRaw",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "path",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "zkp",
          "type": "uint256[]"
        }
      ],
      "name": "qString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierJSON",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierRU",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x98708067a6564b50dba347fd2784da60337b8290b8d61bd8f1095e5ca89b779d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2106233",
    "logsBloom": "0x
    "blockHash": "0xc3c1efafaffa82a7bbd51fc6df1b3bd3345f3745c4aaf3a321eceb52bf3e88d0",
    "transactionHash": "0x98708067a6564b50dba347fd2784da60337b8290b8d61bd8f1095e5ca89b779d",
    "logs": [],
    "blockNumber": 21,
    "cumulativeGasUsed": "2106233",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "94e08685aba75754727e16e3a643b531",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierJSON\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"commit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"committer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"path2\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qCustom\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qFloat\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qNull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qRaw\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"path\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"zkp\",\"type\":\"uint256[]\"}],\"name\":\"qString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierJSON\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierRU\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Json.sol\":\"Json\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Json.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"./libs/contracts/ZKJson.sol\\\";\\nimport \\\"./libs/contracts/ZKRollup.sol\\\";\\n\\n\\n\\ninterface VerifierJSON {\\n  function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[12] calldata _pubSignals) view external returns (bool);\\n}\\n\\ncontract Json is ZKJson, ZKRollup {\\n  uint constant SIZE_PATH = 5;\\n  uint constant SIZE_VAL = 5;\\n  \\n  constructor (address _verifierJSON){\\n    verifierJSON = _verifierJSON;\\n  }\\n  \\n  function validateQuery(uint[] memory path, uint[] memory zkp) private view returns(uint[] memory){\\n    verify(zkp, VerifierJSON.verifyProof.selector, verifierJSON);\\n\\treturn _validateQueryRU(path, zkp, SIZE_PATH, SIZE_VAL);    \\n  }\\n\\n  function qInt (uint[] memory path, uint[] memory zkp) public view returns (int) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return _qInt(value);\\n  }\\n\\n  function qFloat (uint[] memory path, uint[] memory zkp) public view returns (uint[3] memory) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return _qFloat(value);\\n  }\\n\\n  function qRaw (uint[] memory path, uint[] memory zkp) public view returns (uint[] memory) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return _qRaw(value);\\n  }\\n  \\n  function qString (uint[] memory path, uint[] memory zkp) public view returns (string memory) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return _qString(value);\\n  }\\n\\n  function qBool (uint[] memory path, uint[] memory zkp) public view returns (bool) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return _qBool(value);\\n  }\\n  \\n  function qNull (uint[] memory path, uint[] memory zkp) public view returns (bool) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return _qNull(value);\\n  }\\n  \\n  function qCustom (uint[] memory path, uint[] memory path2, uint[] memory zkp) public view returns (int) {\\n    uint[] memory value = validateQuery(path, zkp);\\n    return getInt(path2, value);\\n  }\\n}\",\"keccak256\":\"0x238966b33a8e8b50da2a4251406eb7cd045ff3352e6d10c5a22cfd7d19182c34\",\"license\":\"UNLICENSED\"},\"contracts/libs/contracts/ZKJson.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\nimport \\\"./ZKQuery.sol\\\";\\n\\ncontract ZKJson is ZKQuery{\\n  address public verifierJSON;\\n\\n  function _validateQueryJSON(uint[] memory path, uint[] memory zkp, uint size_path, uint size_val) internal pure returns(uint[] memory){\\n    require(zkp[8] == 1, \\\"value doesn't exist\\\");\\n    for(uint i = 10; i < 10 + size_path; i++){\\n      require((path.length <= i - 10 && zkp[i] == 0) || path[i - 10] == zkp[i], \\\"wrong path\\\");\\n    }\\n    uint[] memory value = new uint[](size_val);\\n    for(uint i = 10 + size_path; i < 10 + size_path + size_val; i++){\\n      value[i - (10 + size_val)] = zkp[i];\\n    }\\n    return toArr(value);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xb9c20eed94fa05358b0207b99667ed55685fc204ba2d7485bee51e52904e1552\",\"license\":\"MIT\"},\"contracts/libs/contracts/ZKQuery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\ncontract ZKQuery {\\n\\n  function getPath(uint i, uint[] memory _json) private pure returns(uint[] memory, uint){\\n    uint[] memory _path;\\n    assembly {\\n      let json := add(_json, 0x20)\\n      let len := mload(add(json, mul(i, 0x20)))\\n      i := add(i, 1)\\n      _path := msize()\\n      mstore(_path, sub(mload(_json), i))\\n      let _path0 := add(_path, 0x20)\\n      mstore(_path0, len)\\n      let pi := 0x20\\n      for { let i2 := 0 } lt(i2, len) { i2 := add(i2, 1) } {\\n\\tlet plen := mload(add(json, mul(i, 0x20)))\\n        mstore(add(_path0, pi), plen)\\n\\tpi := add(pi, 0x20)\\n\\ti := add(i, 1)\\n\\tlet plen2 := 1\\n\\tif iszero(plen) {\\n          if iszero(mload(add(json, mul(i, 0x20)))){\\n\\t    plen2 := 2\\n          }\\n        }\\n\\tfor { let i3 := 0 } lt(i3, plen2) { i3 := add(i3, 1) } {\\n\\t  mstore(add(_path0, pi), mload(add(json, mul(i, 0x20))))\\n\\t  pi := add(pi, 0x20)\\n\\t  i := add(i, 1)\\n\\t}\\n      }\\n      mstore(_path, div(pi, 0x20))\\n      mstore(0x40, add(_path, add(0x20, pi)))\\n    }\\n    return (_path, i);\\n  }\\n\\n  function _getVal(uint i, uint[] memory _json) private pure returns(uint[] memory, uint){\\n    uint[] memory _val;\\n    assembly {\\n      let json := add(_json, 0x20)\\n      _val := msize()\\n      mstore(_val, sub(mload(_json), i))\\n      let _val0 := add(_val, 0x20)\\n      let _type := mload(add(json, mul(i, 0x20)))\\n      i := add(i, 1)\\n      let vlen := 0x20\\n      mstore(_val0, _type)\\n      let len := 0\\t\\n      if eq(_type, 1) {\\n\\tlen := 1\\n      }\\n      if eq(_type, 2) {\\n\\tlen := 3\\n      }\\n      if eq(_type, 3) {\\n\\tlen := add(mload(add(json, mul(i, 0x20))), 1)\\n      }\\n      for { let i2 := 0 } lt(i2, len) { i2 := add(i2, 1) } {\\n\\tmstore(add(_val0, vlen), mload(add(json, mul(i, 0x20))))\\t  \\n\\tvlen := add(vlen, 0x20)\\n        i := add(i, 1)\\n      }\\n      mstore(_val, div(vlen, 0x20))\\n      mstore(0x40, add(_val, add(0x20, vlen)))\\n    }\\n    return (_val, i);\\n  }\\n  \\n  function getVal(uint[] memory path, uint[] memory _json) private pure returns(uint[] memory){\\n    require (_json[0] == 4, \\\"not raw value\\\");\\n    uint[] memory path2 = toArr(path);\\n    uint i = 1;\\n    while(i < _json.length){\\n      (uint[] memory _path, uint i2) = getPath(i, _json);\\n      (uint[] memory _val2, uint i3) = _getVal(i2, _json);\\n      i = i3;\\n      uint path_match = 1;\\n      if(_path.length != path2.length){\\n\\tpath_match = 0;\\n      }else{\\n\\tfor(uint i4 = 0; i4 < path2.length; i4++){\\n\\t  if(_path[i4] != path2[i4]) path_match = 0;\\n\\t}\\n      }\\n      if(path_match == 1) return _val2;\\n    }\\n    require(false, \\\"value not found\\\");\\n  }\\n  \\n  function toArr(uint[] memory json) internal pure returns(uint[] memory){\\n    uint[]  memory _json;\\n    assembly {\\n      let ji := 0x0\\n      let prev := 0\\n      let start := add(json, 0x20)\\n      _json := msize()\\n      mstore(_json, mload(json))\\n      let _json0 := add(_json, 0x20)\\n      for { let i := 0 } lt(i, mload(json)) { i := add(i, 1) } {\\n\\tlet v := mload(add(start, mul(i, 0x20)))\\n\\tif gt(v,0) {  \\n\\t  let p := 0\\n\\t  let x := v\\n  \\t  let on := 0 // 0 = first, 1 = off, 2 = on, 3 = is9, 4 = to set zero, 5 = zero\\n\\t  let cur := 0\\n\\t  let len := 0\\n\\t  let num := 0\\n          for { } gt(v, 0) { } {\\n\\t    v := div(v, 10)\\n            p := add(p, 1)\\n          }\\n\\t  for { } gt(p, 0) { } {\\n\\t    let n := div(x, exp(10, sub(p, 1)))\\n\\t    let _on := on\\n\\t    if iszero(_on){\\n\\t      on := 1\\n\\t    }\\n\\t    if and(eq(_on, 1), iszero(n)) {\\n\\t        on := 4\\n\\t    }\\n    \\t    if eq(_on, 4) {\\n\\t        on := 5\\n\\t\\tlen := n\\n\\t    }\\t\\n\\t    if and(eq(_on, 1), gt(n, 0)) {\\n\\t      if eq(n, 9) {\\n\\t\\tlen := 8\\n\\t        on := 3       \\n\\t      }\\n\\t      if and(iszero(iszero(n)), iszero(eq(n,9))) {\\n\\t        on := 2\\n\\t\\tlen := n  \\n\\t      }\\n              cur := 0\\n\\t    }\\n\\t    if gt(_on, 1) {\\n\\t      if eq(_on, 5){\\n\\t\\tmstore(add(_json0, ji), n)\\n\\t\\tlen := sub(len, 1)\\n\\t\\tji := add(ji, 0x20)\\n\\t\\tif iszero(len) {\\n\\t\\t  cur := 0\\n\\t\\t  on := 1\\n\\t\\t  len := 0\\n\\t\\t  num := 0\\n\\t\\t}\\n\\t      }\\n\\t      if iszero(eq(_on, 5)){\\n                num := add(num, mul(n, exp(10, sub(sub(len, cur), 1))))\\n                cur := add(cur, 1)\\n                if eq(cur, len) {\\n                  prev := mul(prev, exp(10, len))\\n                  if eq(_on, 3) {\\n                    prev := add(prev, num)\\n                  }\\n\\t          if iszero(eq(_on, 3)) {\\n                    num := add(num, prev)\\n                    prev := 0\\n\\t\\t    mstore(add(_json0, ji), num)\\n                    ji := add(ji, 0x20)\\n                  }\\n                  cur := 0\\n                  on := 1\\n                  len := 0\\n                  num := 0\\n                }\\n\\t      }\\n            }\\n\\t    x := sub(x, mul(exp(10, sub(p, 1)), n))\\n\\t    p := sub(p, 1)\\n\\t  }\\n\\t}\\n      }\\n      mstore(_json, div(ji, 0x20))\\n      mstore(0x40, add(_json, add(0x20, ji)))\\n    }\\n    return _json;\\n  }\\n\\n  function _toString(uint8[] memory charCodes) private pure returns (string memory) {\\n    bytes memory stringBytes = new bytes(charCodes.length);\\n    for (uint i = 0; i < charCodes.length; i++) stringBytes[i] = bytes1(charCodes[i]);\\n    return string(stringBytes);\\n  }\\n\\n  function _qInt (uint[] memory value) internal pure returns (int) {\\n    require(value[0] == 2 && value[2] == 0, \\\"not int\\\");\\n    return int(value[3]) * (value[1] == 1 ? int(1) : int(-1));\\n  }\\n  \\n  function _qFloat (uint[] memory value) internal pure returns (uint[3] memory) {\\n    require(value[0] == 2 && value[2] != 0, \\\"not float\\\");\\n    uint[3] memory float;\\n    float[0] = value[1];\\n    float[1] = value[2];\\n    float[2] = value[3];\\n    return float;\\n  }\\n\\n  function _qRaw (uint[] memory value) internal pure returns (uint[] memory) {\\n    require(value[0] == 4, \\\"not object or array\\\");\\n    return value;\\n  }\\n  \\n  function _qString (uint[] memory value) internal pure returns (string memory) {\\n    require(value[0] == 3, \\\"not string\\\");\\n    uint8[] memory charCodes = new uint8[](value[1]);\\n    for(uint i = 0; i < value[1];i++) charCodes[i] = uint8(value[i+2]);\\n    string memory str = _toString(charCodes);\\n    return str;\\n  }\\n\\n  function _qBool (uint[] memory value) internal pure returns (bool) {\\n    require(value[0] == 1, \\\"not bool\\\");\\n    return value[1] == 1 ? true : false;\\n  }\\n  \\n  function _qNull (uint[] memory value) internal pure returns (bool) {\\n    require(value[0] == 0, \\\"not null\\\");\\n    return true;\\n  }\\n\\n  function _qCond (uint[] memory value, uint[] memory cond) internal pure returns (bool) {\\n    uint[] memory _cond = toArr(cond);\\n    require(value.length == _cond.length, \\\"wrong query\\\");\\n    for(uint i = 0; i < value.length; i++)  require(_cond[i] == value[i], \\\"wrong query\\\");\\n    return true;\\n  }\\n  \\n  function getInt (uint[] memory path, uint[] memory raw) internal pure returns (int) {\\n    uint[] memory value = getVal(path, raw);\\n    return _qInt(value);\\n  }\\n\\n  function getString (uint[] memory path, uint[] memory raw) internal pure returns (string memory) {\\n    uint[] memory value = getVal(path, raw);\\n    _qString(value);\\n  }\\n\\n  function getBool (uint[] memory path, uint[] memory raw) internal pure returns (bool) {\\n    uint[] memory value = getVal(path, raw);\\n    _qBool(value);\\n  }\\n\\n  function getNull (uint[] memory path, uint[] memory raw) internal pure returns (bool) {\\n    uint[] memory value = getVal(path, raw);\\n    _qNull(value);\\n  }\\n  \\n  function verify(uint[] memory zkp, bytes4 selector, address addr) internal view returns (bool) {\\n    uint size;\\n    assembly {\\n      size := extcodesize(addr)\\n    }\\n    require(size > 0, \\\"contract doesn't exist\\\");\\n    bool valid;\\n    assembly{\\n      let callData := mload(0x40)\\n      let zlen := mload(zkp)\\n      let clen := add(0x4, mul(0x20, zlen))\\n      mstore(callData, clen)\\n      mstore(add(callData, 0x20), selector)\\n      for { let i := 1 } lt(i, add(1, zlen)) { i := add(i, 1) } {\\n\\tmstore(add(callData, add(0x4, mul(i, 0x20))), mload(add(zkp, mul(i, 0x20))))\\n      }\\n      let success := staticcall(\\n        gas(),            \\n        addr,\\n\\tadd(callData, 0x20), \\n\\tclen,   \\n\\tcallData,         \\n\\t0x20          \\n      )\\n      if iszero(success) {\\n        revert(0, 0)\\n      }\\n      valid := mload(callData)\\n    }\\n    require(valid, \\\"invalid proof\\\");\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xe7684a0fe0f831ad389d00b6d1906ca61a9ab52eb0451fe0a15b93a2134b0be4\",\"license\":\"MIT\"},\"contracts/libs/contracts/ZKRollup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"./ZKQuery.sol\\\";\\n\\ninterface VerifierRU {\\n  function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[11] calldata _pubSignals) view external returns (bool);\\n\\n}\\n\\ncontract ZKRollup is ZKQuery {\\n  address public verifierRU;\\n  address public committer;\\n  uint public root;\\n  \\n  function _validateQueryRU(uint[] memory path, uint[] memory zkp, uint size_path, uint size_val) internal view returns(uint[] memory){\\n    require(zkp[19] == root, \\\"root mismatch\\\");\\n    require(zkp[size_path + size_val + 10] == path[0], \\\"wrong collection\\\");\\n    require(zkp[size_path + size_val + 11] == path[1], \\\"wrong doc\\\");\\n    require(zkp[8] == 1, \\\"value doesn't exist\\\");\\n    require(path.length <= size_path + size_val, \\\"path too long\\\");\\n    for(uint i = 9; i < 9 + path.length - 2; i++) require(path[i - 7] == zkp[i], \\\"wrong path\\\");\\n    uint[] memory value = new uint[](size_val);\\n    for(uint i = 9 + size_path; i < 9 + size_path + size_val; i++) value[i - (9 + size_path)] = zkp[i];\\n    return toArr(value);\\n  }\\n\\n  function commit (uint[] memory zkp) public returns (uint) {\\n    require (zkp[9] == root, \\\"wrong merkle root\\\");\\n    require(msg.sender == committer, \\\"sender is not committer\\\");\\n    root = zkp[8];\\n    verify(zkp,VerifierRU.verifyProof.selector, verifierRU);\\n    return root;\\n  }\\n}\\n\",\"keccak256\":\"0x66eb5b098eae7a811fb275bc399510f79eaa793f87f6c39b835b93b73e367efb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1184,
        "contract": "contracts/Json.sol:Json",
        "label": "verifierJSON",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2001,
        "contract": "contracts/Json.sol:Json",
        "label": "verifierRU",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2003,
        "contract": "contracts/Json.sol:Json",
        "label": "committer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2005,
        "contract": "contracts/Json.sol:Json",
        "label": "root",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}